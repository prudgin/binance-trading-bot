from abc import ABCMeta, abstractmethod
import collections
import mplfinance as mpf
import pandas as pd
import numpy as np
import talib

import helper_functions as hlp
import indicators


class Strategy(object):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.

    The goal of a (derived) Strategy object is to generate Signal
    objects for particular symbols based on the inputs of Bars
    (OLHCVI) generated by a DataHandler object.

    This is designed to work both with historic and live data as
    the Strategy object is agnostic to the data source,
    since it obtains the bar tuples from a queue object.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_signals(self):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")


class EMAStrategy(Strategy):
    """
    This is an extremely simple strategy
    """

    def __init__(self, events, n, max_buffer_size):
        """
        Initialises the EMA strategy.
        """
        self.events = events
        self.n = n
        self.buffer = collections.deque(maxlen=max_buffer_size)

        self.ema_indicator = indicators.EMA(self.n)

    def calculate_signals(self, data_feed: dict):
        #  TODO: in live trading data feed can be a bunch of canldes, not just one
        #   if for example we download them after restoring lost connection to exchange

        self.buffer.append(self.ema_indicator.calculate_next(data_feed))



